import numpy as np
import matplotlib.pyplot as plt
import sys

# PARAMETERS HERE!
lut_size = 32
lut_width = 16

try:
    assert (len(sys.argv) == 2)
except:
    print(f"ERROR! Too few or too many arguments. Use:\n    python3", sys.argv[0], "wave_type")
    sys.exit(1)

valid_args = ["sine", "sawtooth", "triangular", "rectangular"]
try:
    assert (sys.argv[1] in valid_args)
except:
    print(f"ERROR! Valid arguments: {valid_args}")
    sys.exit(1)

wave_type = sys.argv[1]
print("Generating SV code for a", wave_type, "LUT.")

should_plot = True

vec = []

my_str = ""
my_str += "/*\n"
my_str += "    This file was generated by `root_dir`/gen_lut.py\n"
my_str += "*/\n\n"
my_str += f"module {wave_type}_lut #(\n"
my_str += f"    localparam int OUT_WIDTH = {lut_width},\n"
my_str += f"    localparam int LUT_SIZE = {lut_size},\n"
my_str += "    localparam int SEL_WIDTH = $clog2(LUT_SIZE)\n"
my_str += ") (\n"
my_str += f"    output logic signed [OUT_WIDTH-1:0] {wave_type}_o,\n"
my_str += "    input  logic                        clk,\n"
my_str += "    input  logic                        rst_n,\n"
my_str += "    input  logic        [SEL_WIDTH-1:0] lut_sel"
my_str += ",\n    input  logic                        reverse" if (wave_type == "sawtooth") else ""
my_str += ",\n    input  logic        [SEL_WIDTH-1:0] duty_cycle" if (wave_type == "rectangular") else ""
my_str += "\n);\n\n"
my_str += "logic [SEL_WIDTH-1:0] sawtooth_sel;\n" if (wave_type == "sawtooth") else ""
my_str += "assign sawtooth_sel = (reverse) ? ~lut_sel : lut_sel;\n\n" if (wave_type == "sawtooth") else ""
my_str += "always_ff @(posedge clk) begin\n"
my_str += "    if (!rst_n) begin\n"
my_str += f"        {wave_type}_o <= 0;\n"
my_str += "    end else begin\n"
if wave_type == "rectangular":
    my_str += f"        {wave_type}_o <= (lut_sel < duty_cycle) ? {lut_width}'sd{(2**(lut_width-1) - 1)} : -{lut_width}'sd{(2**(lut_width-1) - 1)};\n"
else:
    my_str +=  "        case(sawtooth_sel)\n" if (wave_type == "sawtooth") else "        case(lut_sel)\n"
    for i in range(0, lut_size):
        val = 0
        if wave_type == valid_args[0]:
            val = int(round((2**(lut_width-1) - 1) * np.sin(2*np.pi * i/lut_size)))
        if wave_type == valid_args[1]:
            val = int(round((2**(lut_width-1) - 1) * (2/np.pi) * np.arctan(np.tan(np.pi*i/lut_size))))
        if wave_type == valid_args[2]:
            val = int(round((2**(lut_width-1) - 1) * (4/lut_size * np.abs(i - lut_size * np.floor(i/lut_size + 0.5)) - 1)))
        number_str = "" if (val >= 0) else "-"
        number_str += f"{lut_width}'sd{abs(val)}"
        my_str += f"            {i}: {wave_type}_o <= {number_str};\n"
        vec.append(val)
    my_str += "        endcase\n"
my_str += "    end\n"
my_str += "end\n\n"
my_str += "endmodule\n"
    
# print(my_str)

file = f"../rtl/{wave_type}_lut.sv"
with open(file, 'w') as file:
    file.write(my_str)

if should_plot:
    plt.plot(vec+vec)
    plt.show()